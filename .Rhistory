min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence)
return(query)
url = paste0(base_url, query)
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', authentication_token)))
content <- content(response)$tracks
if(length(content) == 0){
print('No tracks found')
return(NULL)
}
tracks_found <- data.frame('Track.Name' = '', 'Track.Artist' = '', 'Track.ID' = '', 'Track.Popularity' = '')
for(item in 1:length(content)) {
track_name <- content[[item]]$name
artist_list <- content[[item]]$artists
track_ID <- content[[item]]$id
track_popularity <- content[[item]]$popularity
artists <- ''
for(artist in 1:length(artist_list)){
if(artist == 1){
artists <- glue('{artist_list[[artist]]$name}')
} else {
artists <- glue('{artists}, {artist_list[[artist]]$name}')
}
}
if(is.null(track_ID) | class(track_ID)=='try-error') {
track_ID <- 'Unknown'
}
tracks_found <- rbind(tracks_found, data.frame(
'Track.Name' = track_name,
'Track.Artist' = artists,
'Track.ID' = track_ID,
'Track.Popularity' = track_popularity))
}
return(tracks_found)
}
client_id = Sys.getenv('Spotify_client_id')
client_secret = Sys.getenv('Spotify_client_secret')
## Assign token to global to not need inputting it into each function
auth_token <<- get_authentication_token(client_id, client_secret)
get_songs(c('alt j', 'glass animals'), c('psychedelic rock', 'indie rock'), '306zYyz3PFvBgLFGOCy9Xb')
get_songs(c('alt j', 'glass animals'), c('psychedelic rock', 'indie rock'), '306zYyz3PFvBgLFGOCy9Xb')
get_songs <- function(seed_artists, seed_genres, seed_tracks,
authentication_token = auth_token,
## Optional bleow
limit=10, market=NA,
min_acousticness=NA, max_acousticness=NA, target_acousticness=NA,
min_danceability=NA, max_danceability=NA, target_danceability=NA,
min_duration_ms=NA, max_duration_ms=NA, target_duration_ms=NA,
min_energy=NA, max_energy=NA, target_energy=NA,
min_instrumentalness=NA, max_instrumentalness=NA, target_instrumentalness=NA,
min_key=NA, max_key=NA, target_key=NA,
min_liveness=NA, max_liveness=NA, target_liveness=NA,
min_loudness=NA, max_loudness=NA, target_loudness=NA,
min_mode=NA, max_mode=NA, target_mode=NA,
min_popularity=NA, max_popularity=NA, target_popularity=NA,
min_speechiness=NA, max_speechiness=NA, target_speechiness=NA,
min_tempo=NA, max_tempo=NA, target_tempo=NA,
min_time_signature=NA, max_time_signature=NA, target_time_signature=NA,
min_valence=NA, max_valence=NA, target_valence=NA) {
temp <- ''
for(artist in 1:length(seed_artists)){
if(artist == 1){
id <- get_artist_ID(seed_artists[artist])[2]
temp <- glue('{id}')
} else {
id <- get_artist_ID(seed_artists[artist])[2]
temp <- glue('{temp}%2C{id}')
}
}
seed_artists <- temp
temp <- ''
for(genre in 1:length(seed_genres)){
clean <- str_replace_all(seed_genres[genre], ' ', '%20')
if(genre == 1){
temp <- clean
} else {
temp <- glue('{temp}%2C{clean}')
}
}
seed_genres <- temp
base_url = 'https://api.spotify.com/v1/recommendations'
query = query_assembler(seed_artists, seed_genres, seed_tracks, limit, market,
min_acousticness, max_acousticness, target_acousticness,
min_danceability, max_danceability, target_danceability,
min_duration_ms, max_duration_ms, target_duration_ms,
min_energy, max_energy, target_energy,
min_instrumentalness, max_instrumentalness, target_instrumentalness,
min_key, max_key, target_key,
min_liveness, max_liveness, target_liveness,
min_loudness, max_loudness, target_loudness,
min_mode, max_mode, target_mode,
min_popularity, max_popularity, target_popularity,
min_speechiness, max_speechiness, target_speechiness,
min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence)
url = paste0(base_url, query)
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', authentication_token)))
content <- content(response)$tracks
if(length(content) == 0){
print('No tracks found')
return(NULL)
}
tracks_found <- data.frame('Track.Name' = '', 'Track.Artist' = '', 'Track.ID' = '', 'Track.Popularity' = '')
for(item in 1:length(content)) {
track_name <- content[[item]]$name
artist_list <- content[[item]]$artists
track_ID <- content[[item]]$id
track_popularity <- content[[item]]$popularity
artists <- ''
for(artist in 1:length(artist_list)){
if(artist == 1){
artists <- glue('{artist_list[[artist]]$name}')
} else {
artists <- glue('{artists}, {artist_list[[artist]]$name}')
}
}
if(is.null(track_ID) | class(track_ID)=='try-error') {
track_ID <- 'Unknown'
}
tracks_found <- rbind(tracks_found, data.frame(
'Track.Name' = track_name,
'Track.Artist' = artists,
'Track.ID' = track_ID,
'Track.Popularity' = track_popularity))
}
return(tracks_found)
}
get_songs(c('alt j', 'glass animals'), c('psychedelic rock', 'indie rock'), '306zYyz3PFvBgLFGOCy9Xb')
get_song_ID('value')
get_track_ID('value')
get_songs('A$AP Ferg', 'rap', '7im3jaJBEYivH5JKXMh1Yy')
get_songs('A$AP Ferg', 'rap', '7im3jaJBEYivH5JKXMh1Yy')
get_songs('A$AP Ferg', c('rap', 'hard rap', 'hip hop'), '7im3jaJBEYivH5JKXMh1Yy')
get_songs <- function(seed_artists, seed_genres, seed_tracks,
authentication_token = auth_token,
## Optional bleow
limit=10, market=NA,
min_acousticness=NA, max_acousticness=NA, target_acousticness=NA,
min_danceability=NA, max_danceability=NA, target_danceability=NA,
min_duration_ms=NA, max_duration_ms=NA, target_duration_ms=NA,
min_energy=NA, max_energy=NA, target_energy=NA,
min_instrumentalness=NA, max_instrumentalness=NA, target_instrumentalness=NA,
min_key=NA, max_key=NA, target_key=NA,
min_liveness=NA, max_liveness=NA, target_liveness=NA,
min_loudness=NA, max_loudness=NA, target_loudness=NA,
min_mode=NA, max_mode=NA, target_mode=NA,
min_popularity=NA, max_popularity=NA, target_popularity=NA,
min_speechiness=NA, max_speechiness=NA, target_speechiness=NA,
min_tempo=NA, max_tempo=NA, target_tempo=NA,
min_time_signature=NA, max_time_signature=NA, target_time_signature=NA,
min_valence=NA, max_valence=NA, target_valence=NA) {
temp <- ''
for(artist in 1:length(seed_artists)){
if(artist == 1){
id <- get_artist_ID(seed_artists[artist])[2]
temp <- glue('{id}')
} else {
id <- get_artist_ID(seed_artists[artist])[2]
temp <- glue('{temp}%2C{id}')
}
}
seed_artists <- temp
temp <- ''
for(genre in 1:length(seed_genres)){
clean <- str_replace_all(seed_genres[genre], ' ', '%20')
if(genre == 1){
temp <- clean
} else {
temp <- glue('{temp}%2C{clean}')
}
}
seed_genres <- temp
base_url = 'https://api.spotify.com/v1/recommendations'
query = query_assembler(seed_artists, seed_genres, seed_tracks, limit, market,
min_acousticness, max_acousticness, target_acousticness,
min_danceability, max_danceability, target_danceability,
min_duration_ms, max_duration_ms, target_duration_ms,
min_energy, max_energy, target_energy,
min_instrumentalness, max_instrumentalness, target_instrumentalness,
min_key, max_key, target_key,
min_liveness, max_liveness, target_liveness,
min_loudness, max_loudness, target_loudness,
min_mode, max_mode, target_mode,
min_popularity, max_popularity, target_popularity,
min_speechiness, max_speechiness, target_speechiness,
min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence)
url = paste0(base_url, query)
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', authentication_token)))
content <- content(response)$tracks
if(length(content) == 0){
print('No tracks found')
return(NULL)
}
tracks_found <- data.frame('Track.Name' = '', 'Track.Artist' = '', 'Track.ID' = '', 'Track.Popularity' = '', 'Track.Link' = '')
for(item in 1:length(content)) {
track_name <- content[[item]]$name
artist_list <- content[[item]]$artists
track_ID <- content[[item]]$id
track_popularity <- content[[item]]$popularity
track_link <- content[[item]]$href
artists <- ''
for(artist in 1:length(artist_list)){
if(artist == 1){
artists <- glue('{artist_list[[artist]]$name}')
} else {
artists <- glue('{artists}, {artist_list[[artist]]$name}')
}
}
if(is.null(track_ID) | class(track_ID)=='try-error') {
track_ID <- 'Unknown'
}
tracks_found <- rbind(tracks_found, data.frame(
'Track.Name' = track_name,
'Track.Artist' = artists,
'Track.ID' = track_ID,
'Track.Popularity' = track_popularity,
'Track.Link' = track_link))
}
return(tracks_found)
}
get_track_ID('value')
get_songs('A$AP Ferg', c('rap', 'hard rap', 'hip hop'), '7im3jaJBEYivH5JKXMh1Yy')
get_songs <- function(seed_artists, seed_genres, seed_tracks,
authentication_token = auth_token,
## Optional bleow
limit=10, market=NA,
min_acousticness=NA, max_acousticness=NA, target_acousticness=NA,
min_danceability=NA, max_danceability=NA, target_danceability=NA,
min_duration_ms=NA, max_duration_ms=NA, target_duration_ms=NA,
min_energy=NA, max_energy=NA, target_energy=NA,
min_instrumentalness=NA, max_instrumentalness=NA, target_instrumentalness=NA,
min_key=NA, max_key=NA, target_key=NA,
min_liveness=NA, max_liveness=NA, target_liveness=NA,
min_loudness=NA, max_loudness=NA, target_loudness=NA,
min_mode=NA, max_mode=NA, target_mode=NA,
min_popularity=NA, max_popularity=NA, target_popularity=NA,
min_speechiness=NA, max_speechiness=NA, target_speechiness=NA,
min_tempo=NA, max_tempo=NA, target_tempo=NA,
min_time_signature=NA, max_time_signature=NA, target_time_signature=NA,
min_valence=NA, max_valence=NA, target_valence=NA) {
temp <- ''
for(artist in 1:length(seed_artists)){
if(artist == 1){
id <- get_artist_ID(seed_artists[artist])[2]
temp <- glue('{id}')
} else {
id <- get_artist_ID(seed_artists[artist])[2]
temp <- glue('{temp}%2C{id}')
}
}
seed_artists <- temp
temp <- ''
for(genre in 1:length(seed_genres)){
clean <- str_replace_all(seed_genres[genre], ' ', '%20')
if(genre == 1){
temp <- clean
} else {
temp <- glue('{temp}%2C{clean}')
}
}
seed_genres <- temp
base_url = 'https://api.spotify.com/v1/recommendations'
query = query_assembler(seed_artists, seed_genres, seed_tracks, limit, market,
min_acousticness, max_acousticness, target_acousticness,
min_danceability, max_danceability, target_danceability,
min_duration_ms, max_duration_ms, target_duration_ms,
min_energy, max_energy, target_energy,
min_instrumentalness, max_instrumentalness, target_instrumentalness,
min_key, max_key, target_key,
min_liveness, max_liveness, target_liveness,
min_loudness, max_loudness, target_loudness,
min_mode, max_mode, target_mode,
min_popularity, max_popularity, target_popularity,
min_speechiness, max_speechiness, target_speechiness,
min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence)
url = paste0(base_url, query)
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', authentication_token)))
content <- content(response)$tracks
return(content)
if(length(content) == 0){
print('No tracks found')
return(NULL)
}
tracks_found <- data.frame('Track.Name' = '', 'Track.Artist' = '', 'Track.ID' = '', 'Track.Popularity' = '', 'Track.Link' = '')
for(item in 1:length(content)) {
track_name <- content[[item]]$name
artist_list <- content[[item]]$artists
track_ID <- content[[item]]$id
track_popularity <- content[[item]]$popularity
track_link <- content[[item]]$href
artists <- ''
for(artist in 1:length(artist_list)){
if(artist == 1){
artists <- glue('{artist_list[[artist]]$name}')
} else {
artists <- glue('{artists}, {artist_list[[artist]]$name}')
}
}
if(is.null(track_ID) | class(track_ID)=='try-error') {
track_ID <- 'Unknown'
}
tracks_found <- rbind(tracks_found, data.frame(
'Track.Name' = track_name,
'Track.Artist' = artists,
'Track.ID' = track_ID,
'Track.Popularity' = track_popularity,
'Track.Link' = track_link))
}
return(tracks_found)
}
c <- get_songs('A$AP Ferg', c('rap', 'hard rap', 'hip hop'), '7im3jaJBEYivH5JKXMh1Yy')
c
get_songs <- function(seed_artists, seed_genres, seed_tracks,
authentication_token = auth_token,
## Optional bleow
limit=10, market=NA,
min_acousticness=NA, max_acousticness=NA, target_acousticness=NA,
min_danceability=NA, max_danceability=NA, target_danceability=NA,
min_duration_ms=NA, max_duration_ms=NA, target_duration_ms=NA,
min_energy=NA, max_energy=NA, target_energy=NA,
min_instrumentalness=NA, max_instrumentalness=NA, target_instrumentalness=NA,
min_key=NA, max_key=NA, target_key=NA,
min_liveness=NA, max_liveness=NA, target_liveness=NA,
min_loudness=NA, max_loudness=NA, target_loudness=NA,
min_mode=NA, max_mode=NA, target_mode=NA,
min_popularity=NA, max_popularity=NA, target_popularity=NA,
min_speechiness=NA, max_speechiness=NA, target_speechiness=NA,
min_tempo=NA, max_tempo=NA, target_tempo=NA,
min_time_signature=NA, max_time_signature=NA, target_time_signature=NA,
min_valence=NA, max_valence=NA, target_valence=NA) {
temp <- ''
for(artist in 1:length(seed_artists)){
if(artist == 1){
id <- get_artist_ID(seed_artists[artist])[2]
temp <- glue('{id}')
} else {
id <- get_artist_ID(seed_artists[artist])[2]
temp <- glue('{temp}%2C{id}')
}
}
seed_artists <- temp
temp <- ''
for(genre in 1:length(seed_genres)){
clean <- str_replace_all(seed_genres[genre], ' ', '%20')
if(genre == 1){
temp <- clean
} else {
temp <- glue('{temp}%2C{clean}')
}
}
seed_genres <- temp
base_url = 'https://api.spotify.com/v1/recommendations'
query = query_assembler(seed_artists, seed_genres, seed_tracks, limit, market,
min_acousticness, max_acousticness, target_acousticness,
min_danceability, max_danceability, target_danceability,
min_duration_ms, max_duration_ms, target_duration_ms,
min_energy, max_energy, target_energy,
min_instrumentalness, max_instrumentalness, target_instrumentalness,
min_key, max_key, target_key,
min_liveness, max_liveness, target_liveness,
min_loudness, max_loudness, target_loudness,
min_mode, max_mode, target_mode,
min_popularity, max_popularity, target_popularity,
min_speechiness, max_speechiness, target_speechiness,
min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence)
url = paste0(base_url, query)
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', authentication_token)))
content <- content(response)$tracks
return(content)
if(length(content) == 0){
print('No tracks found')
return(NULL)
}
tracks_found <- data.frame('Track.Name' = '', 'Track.Artist' = '', 'Track.ID' = '', 'Track.Popularity' = '', 'Track.Link' = '')
for(item in 1:length(content)) {
track_name <- content[[item]]$name
artist_list <- content[[item]]$artists
track_ID <- content[[item]]$id
track_popularity <- content[[item]]$popularity
track_link <- content[[item]]$external_urls$spotify
artists <- ''
for(artist in 1:length(artist_list)){
if(artist == 1){
artists <- glue('{artist_list[[artist]]$name}')
} else {
artists <- glue('{artists}, {artist_list[[artist]]$name}')
}
}
if(is.null(track_ID) | class(track_ID)=='try-error') {
track_ID <- 'Unknown'
}
tracks_found <- rbind(tracks_found, data.frame(
'Track.Name' = track_name,
'Track.Artist' = artists,
'Track.ID' = track_ID,
'Track.Popularity' = track_popularity,
'Track.Link' = track_link))
}
return(tracks_found)
}
get_track_ID('value')
get_songs('A$AP Ferg', c('rap', 'hard rap', 'hip hop'), '7im3jaJBEYivH5JKXMh1Yy')
get_songs <- function(seed_artists, seed_genres, seed_tracks,
authentication_token = auth_token,
## Optional bleow
limit=10, market=NA,
min_acousticness=NA, max_acousticness=NA, target_acousticness=NA,
min_danceability=NA, max_danceability=NA, target_danceability=NA,
min_duration_ms=NA, max_duration_ms=NA, target_duration_ms=NA,
min_energy=NA, max_energy=NA, target_energy=NA,
min_instrumentalness=NA, max_instrumentalness=NA, target_instrumentalness=NA,
min_key=NA, max_key=NA, target_key=NA,
min_liveness=NA, max_liveness=NA, target_liveness=NA,
min_loudness=NA, max_loudness=NA, target_loudness=NA,
min_mode=NA, max_mode=NA, target_mode=NA,
min_popularity=NA, max_popularity=NA, target_popularity=NA,
min_speechiness=NA, max_speechiness=NA, target_speechiness=NA,
min_tempo=NA, max_tempo=NA, target_tempo=NA,
min_time_signature=NA, max_time_signature=NA, target_time_signature=NA,
min_valence=NA, max_valence=NA, target_valence=NA) {
temp <- ''
for(artist in 1:length(seed_artists)){
if(artist == 1){
id <- get_artist_ID(seed_artists[artist])[2]
temp <- glue('{id}')
} else {
id <- get_artist_ID(seed_artists[artist])[2]
temp <- glue('{temp}%2C{id}')
}
}
seed_artists <- temp
temp <- ''
for(genre in 1:length(seed_genres)){
clean <- str_replace_all(seed_genres[genre], ' ', '%20')
if(genre == 1){
temp <- clean
} else {
temp <- glue('{temp}%2C{clean}')
}
}
seed_genres <- temp
base_url = 'https://api.spotify.com/v1/recommendations'
query = query_assembler(seed_artists, seed_genres, seed_tracks, limit, market,
min_acousticness, max_acousticness, target_acousticness,
min_danceability, max_danceability, target_danceability,
min_duration_ms, max_duration_ms, target_duration_ms,
min_energy, max_energy, target_energy,
min_instrumentalness, max_instrumentalness, target_instrumentalness,
min_key, max_key, target_key,
min_liveness, max_liveness, target_liveness,
min_loudness, max_loudness, target_loudness,
min_mode, max_mode, target_mode,
min_popularity, max_popularity, target_popularity,
min_speechiness, max_speechiness, target_speechiness,
min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence)
url = paste0(base_url, query)
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', authentication_token)))
content <- content(response)$tracks
if(length(content) == 0){
print('No tracks found')
return(NULL)
}
tracks_found <- data.frame('Track.Name' = '', 'Track.Artist' = '', 'Track.ID' = '', 'Track.Popularity' = '', 'Track.Link' = '')
for(item in 1:length(content)) {
track_name <- content[[item]]$name
artist_list <- content[[item]]$artists
track_ID <- content[[item]]$id
track_popularity <- content[[item]]$popularity
track_link <- content[[item]]$external_urls$spotify
artists <- ''
for(artist in 1:length(artist_list)){
if(artist == 1){
artists <- glue('{artist_list[[artist]]$name}')
} else {
artists <- glue('{artists}, {artist_list[[artist]]$name}')
}
}
if(is.null(track_ID) | class(track_ID)=='try-error') {
track_ID <- 'Unknown'
}
tracks_found <- rbind(tracks_found, data.frame(
'Track.Name' = track_name,
'Track.Artist' = artists,
'Track.ID' = track_ID,
'Track.Popularity' = track_popularity,
'Track.Link' = track_link))
}
return(tracks_found)
}
#get_track_ID('value')
get_songs('A$AP Ferg', c('rap', 'hard rap', 'hip hop'), '7im3jaJBEYivH5JKXMh1Yy')
get_track_ID('wind')
get_track_ID('light of the seven')
get_songs('BTS', c('edm'), '1SbsbLsUMnAKWHx1zAV6ER')
#get_track_ID('light of the seven')
get_songs('BTS', c('edm'), '1SbsbLsUMnAKWHx1zAV6ER')
