base_url = 'https://api.spotify.com/v1/recommendations'
query = glue('?seed_artists={seed_artists}&seed_genres={seed_genres}&seed_tracks={seed_tracks}&limit={limit}&market={market}')
url = paste0(base_url, query)
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', authentication_token)))
return (response)
}
####### TEST PARAMETER CELL
my_params <- list(seed_artists='4NHQUGzhtTLFvgF5SZesLK', seed_genres='classical,country',
seed_tracks='0c6xIDDpzE81m2q797ordA', limit=10, market='CA')
unlist(my_params)
reply <- get_song_reccommendations(authentication_token = auth_token, my_params)
reply <- get_song_reccommendations(authentication_token = auth_token, unlist(my_params))
reply <- get_song_reccommendations(authentication_token = auth_token,
seed_artists='4NHQUGzhtTLFvgF5SZesLK',
seed_genres='classical,country',
seed_tracks='0c6xIDDpzE81m2q797ordA',
limit=10, market='CA')
get_songs <- function(authentication_token, seed_artists, seed_genres, seed_tracks,
## Optional bleow
limit=10, market=NA,
min_acousticness=NA, max_acousticness=NA, target_acousticness=NA,
min_danceability=NA, max_danceability=NA, target_danceability=NA,
min_duration_ms=NA, max_duration_ms=NA, target_duration_ms=NA,
min_energy=NA, max_energy=NA, target_energy=NA,
min_instrumentalness=NA, max_instrumentalness=NA, target_instrumentalness=NA,
min_key=NA, max_key=NA, target_key=NA,
min_liveness=NA, max_liveness=NA, target_liveness=NA,
min_loudness=NA, max_loudness=NA, target_loudness=NA,
min_mode=NA, max_mode=NA, target_mode=NA,
min_popularity=NA, max_popularity=NA, target_popularity=NA,
min_speechiness=NA, max_speechiness=NA, target_speechiness=NA,
min_tempo=NA, max_tempo=NA, target_tempo=NA,
min_time_signature=NA, max_time_signature=NA, target_time_signature=NA,
min_valence=NA, max_valence=NA, target_valence=NA) {
base_url = 'https://api.spotify.com/v1/recommendations'
query = query_assembler(seed_artists, seed_genres, seed_tracks, limit, market,
min_acousticness, max_acousticness, target_acousticness,
min_danceability, max_danceability, target_danceability,
min_duration_ms, max_duration_ms, target_duration_ms,
min_energy, max_energy, target_energy,
min_instrumentalness, max_instrumentalness, target_instrumentalness,
min_key, max_key, target_key,
min_liveness, max_liveness, target_liveness,
min_loudness, max_loudness, target_loudness,
min_mode, max_mode, target_mode,
min_popularity, max_popularity, target_popularity,
min_speechiness, max_speechiness, target_speechiness,
min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence)
url = paste0(base_url, query)
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', authentication_token)))
#songs <- NA
#links <- NA
for(i in seq_along(response)){
print(content(response)$tracks[[i]]$name)
}
return (response)
}
query_assembler <- function(seed_artists, seed_genres, seed_tracks, limit, market,
min_acousticness, max_acousticness, target_acousticness,
min_danceability, max_danceability, target_danceability,
min_duration_ms, max_duration_ms, target_duration_ms,
min_energy, max_energy, target_energy,
min_instrumentalness, max_instrumentalness, target_instrumentalness,
min_key, max_key, target_key,
min_liveness, max_liveness, target_liveness,
min_loudness, max_loudness, target_loudness,
min_mode, max_mode, target_mode,
min_popularity, max_popularity, target_popularity,
min_speechiness, max_speechiness, target_speechiness,
min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence) {
## CAPTURE ALL VARIABLES IN A DATAFRAME
arguments <- data.frame(
params = c('seed_artists', 'seed_genres', 'seed_tracks', 'limit', 'market',
'min_acousticness', 'max_acousticness', 'target_acousticness',
'min_danceability', 'max_danceability', 'target_danceability',
'min_duration_ms', 'max_duration_ms', 'target_duration_ms',
'min_energy', 'max_energy', 'target_energy',
'min_instrumentalness', 'max_instrumentalness', 'target_instrumentalness',
'min_key', 'max_key', 'target_key',
'min_liveness', 'max_liveness', 'target_liveness',
'min_loudness', 'max_loudness', 'target_loudness',
'min_mode', 'max_mode', 'target_mode',
'min_popularity', 'max_popularity', 'target_popularity',
'min_speechiness', 'max_speechiness', 'target_speechiness',
'min_tempo', 'max_tempo', 'target_tempo',
'min_time_signature', 'max_time_signature', 'target_time_signature',
'min_valence', 'max_valence', 'target_valence'),
vals = c(seed_artists, seed_genres, seed_tracks, limit, market,
min_acousticness, max_acousticness, target_acousticness,
min_danceability, max_danceability, target_danceability,
min_duration_ms, max_duration_ms, target_duration_ms,
min_energy, max_energy, target_energy,
min_instrumentalness, max_instrumentalness, target_instrumentalness,
min_key, max_key, target_key,
min_liveness, max_liveness, target_liveness,
min_loudness, max_loudness, target_loudness,
min_mode, max_mode, target_mode,
min_popularity, max_popularity, target_popularity,
min_speechiness, max_speechiness, target_speechiness,
min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence))
## FILTER OUT UNSPECIFIED ARGUMENTS
specified_args <- na.omit(arguments)
## FORMAT THE BLANKS ///  var --> 'var={var}&' /// except the last var to --> 'var={var}'
formatted_args <- NA
for(i in 1:nrow(specified_args)){
if (i==1){
formatted_args[[i]] <- glue('?{specified_args[i,1]}={specified_args[i,2]}')
} else {
formatted_args[[i]] <- glue('&{specified_args[i,1]}={specified_args[i,2]}')
}
}
formatted_args
## CONCATENATE SPECIFIED VALUE LIST
assembled_query <- do.call(paste, c(as.list(formatted_args), sep = ""))
## RETURN ASSEMBLED QUERY
return (assembled_query)
}
test_get_song_reccommendations <- function(authentication_token,
seed_artists, seed_genres, seed_tracks,
limit=20, market=''
) {
base_url = 'https://api.spotify.com/v1/recommendations'
query = glue('?seed_artists={seed_artists}&seed_genres={seed_genres}&seed_tracks={seed_tracks}&limit={limit}&market={market}')
url = paste0(base_url, query)
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', authentication_token)))
return (response)
}
####### TEST PARAMETER CELL
my_params <- list(seed_artists='4NHQUGzhtTLFvgF5SZesLK', seed_genres='classical,country',
seed_tracks='0c6xIDDpzE81m2q797ordA', limit=10, market='CA')
unlist(my_params)
reply <- get_songs(authentication_token = auth_token,
seed_artists='4NHQUGzhtTLFvgF5SZesLK',
seed_genres='classical,country',
seed_tracks='0c6xIDDpzE81m2q797ordA',
limit=10, market='CA')
## CAPTURE ALL VARIABLES IN A DATAFRAME
arguments <- data.frame(
params = c('seed_artists', 'seed_genres', 'seed_tracks', 'limit', 'market',
'min_acousticness', 'max_acousticness', 'target_acousticness',
'min_danceability', 'max_danceability', 'target_danceability',
'min_duration_ms', 'max_duration_ms', 'target_duration_ms',
'min_energy', 'max_energy', 'target_energy',
'min_instrumentalness', 'max_instrumentalness', 'target_instrumentalness',
'min_key', 'max_key', 'target_key',
'min_liveness', 'max_liveness', 'target_liveness',
'min_loudness', 'max_loudness', 'target_loudness',
'min_mode', 'max_mode', 'target_mode',
'min_popularity', 'max_popularity', 'target_popularity',
'min_speechiness', 'max_speechiness', 'target_speechiness',
'min_tempo', 'max_tempo', 'target_tempo',
'min_time_signature', 'max_time_signature', 'target_time_signature',
'min_valence', 'max_valence', 'target_valence'),
vals = c(seed_artists, seed_genres, seed_tracks, limit, market,
min_acousticness, max_acousticness, target_acousticness,
min_danceability, max_danceability, target_danceability,
min_duration_ms, max_duration_ms, target_duration_ms,
min_energy, max_energy, target_energy,
min_instrumentalness, max_instrumentalness, target_instrumentalness,
min_key, max_key, target_key,
min_liveness, max_liveness, target_liveness,
min_loudness, max_loudness, target_loudness,
min_mode, max_mode, target_mode,
min_popularity, max_popularity, target_popularity,
min_speechiness, max_speechiness, target_speechiness,
min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence))
nrow(arguments)
library(httr)
library(jsonlite)
library(glue)
get_authentication_token <- function(CLIENT_ID, CLIENT_SECRET){
# Get response
response = POST('https://accounts.spotify.com/api/token',
accept_json(),
authenticate(CLIENT_ID, CLIENT_SECRET),
body = list(grant_type = 'client_credentials'),
encode = 'form',
verbose())
# Assign authorization token
auth_token = content(response)$access_token
return(auth_token)
}
get_songs <- function(authentication_token, seed_artists, seed_genres, seed_tracks,
## Optional bleow
limit=10, market=NA,
min_acousticness=NA, max_acousticness=NA, target_acousticness=NA,
min_danceability=NA, max_danceability=NA, target_danceability=NA,
min_duration_ms=NA, max_duration_ms=NA, target_duration_ms=NA,
min_energy=NA, max_energy=NA, target_energy=NA,
min_instrumentalness=NA, max_instrumentalness=NA, target_instrumentalness=NA,
min_key=NA, max_key=NA, target_key=NA,
min_liveness=NA, max_liveness=NA, target_liveness=NA,
min_loudness=NA, max_loudness=NA, target_loudness=NA,
min_mode=NA, max_mode=NA, target_mode=NA,
min_popularity=NA, max_popularity=NA, target_popularity=NA,
min_speechiness=NA, max_speechiness=NA, target_speechiness=NA,
min_tempo=NA, max_tempo=NA, target_tempo=NA,
min_time_signature=NA, max_time_signature=NA, target_time_signature=NA,
min_valence=NA, max_valence=NA, target_valence=NA) {
base_url = 'https://api.spotify.com/v1/recommendations'
query = query_assembler(seed_artists, seed_genres, seed_tracks, limit, market,
min_acousticness, max_acousticness, target_acousticness,
min_danceability, max_danceability, target_danceability,
min_duration_ms, max_duration_ms, target_duration_ms,
min_energy, max_energy, target_energy,
min_instrumentalness, max_instrumentalness, target_instrumentalness,
min_key, max_key, target_key,
min_liveness, max_liveness, target_liveness,
min_loudness, max_loudness, target_loudness,
min_mode, max_mode, target_mode,
min_popularity, max_popularity, target_popularity,
min_speechiness, max_speechiness, target_speechiness,
min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence)
url = paste0(base_url, query)
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', authentication_token)))
#songs <- NA
#links <- NA
for(i in seq_along(response)){
print(content(response)$tracks[[i]]$name)
}
return (response)
}
query_assembler <- function(seed_artists, seed_genres, seed_tracks, limit, market,
min_acousticness, max_acousticness, target_acousticness,
min_danceability, max_danceability, target_danceability,
min_duration_ms, max_duration_ms, target_duration_ms,
min_energy, max_energy, target_energy,
min_instrumentalness, max_instrumentalness, target_instrumentalness,
min_key, max_key, target_key,
min_liveness, max_liveness, target_liveness,
min_loudness, max_loudness, target_loudness,
min_mode, max_mode, target_mode,
min_popularity, max_popularity, target_popularity,
min_speechiness, max_speechiness, target_speechiness,
min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence) {
## CAPTURE ALL VARIABLES IN A DATAFRAME
arguments <- data.frame(
params = c('seed_artists', 'seed_genres', 'seed_tracks', 'limit', 'market',
'min_acousticness', 'max_acousticness', 'target_acousticness',
'min_danceability', 'max_danceability', 'target_danceability',
'min_duration_ms', 'max_duration_ms', 'target_duration_ms',
'min_energy', 'max_energy', 'target_energy',
'min_instrumentalness', 'max_instrumentalness', 'target_instrumentalness',
'min_key', 'max_key', 'target_key',
'min_liveness', 'max_liveness', 'target_liveness',
'min_loudness', 'max_loudness', 'target_loudness',
'min_mode', 'max_mode', 'target_mode',
'min_popularity', 'max_popularity', 'target_popularity',
'min_speechiness', 'max_speechiness', 'target_speechiness',
'min_tempo', 'max_tempo', 'target_tempo',
'min_time_signature', 'max_time_signature', 'target_time_signature',
'min_valence', 'max_valence', 'target_valence'),
vals = c(seed_artists, seed_genres, seed_tracks, limit, market,
min_acousticness, max_acousticness, target_acousticness,
min_danceability, max_danceability, target_danceability,
min_duration_ms, max_duration_ms, target_duration_ms,
min_energy, max_energy, target_energy,
min_instrumentalness, max_instrumentalness, target_instrumentalness,
min_key, max_key, target_key,
min_liveness, max_liveness, target_liveness,
min_loudness, max_loudness, target_loudness,
min_mode, max_mode, target_mode,
min_popularity, max_popularity, target_popularity,
min_speechiness, max_speechiness, target_speechiness,
min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence))
## FILTER OUT UNSPECIFIED ARGUMENTS
specified_args <- na.omit(arguments)
## FORMAT THE BLANKS ///  var --> 'var={var}&' /// except the last var to --> 'var={var}'
formatted_args <- NA
for(i in 1:nrow(specified_args)){
if (i==1){
formatted_args[[i]] <- glue('?{specified_args[i,1]}={specified_args[i,2]}')
} else {
formatted_args[[i]] <- glue('&{specified_args[i,1]}={specified_args[i,2]}')
}
}
formatted_args
## CONCATENATE SPECIFIED VALUE LIST
assembled_query <- do.call(paste, c(as.list(formatted_args), sep = ""))
## RETURN ASSEMBLED QUERY
return (assembled_query)
}
client_id = Sys.getenv('Spotify_client_id')
client_secret = Sys.getenv('Spotify_client_secret')
auth_token = get_authentication_token(client_id, client_secret)
# Can we possible wrap all the parameters in a list then pass that?
#my_params <- list(seed_artists='4NHQUGzhtTLFvgF5SZesLK', seed_genres='classical,country',
#                 seed_tracks='0c6xIDDpzE81m2q797ordA', limit=10, market='CA')
reply <- get_songs(authentication_token = auth_token,
seed_artists='4NHQUGzhtTLFvgF5SZesLK',
seed_genres='classical,country',
seed_tracks='0c6xIDDpzE81m2q797ordA',
limit=10, market='CA')
reply[4]
reply
fromJSON(reply) %>% as.data.frame
as.data.frame(fromJSON(reply))
reply[1]
reply
reply[2]
reply[3]
reply[4]
reply[5]
reply
reply$headers
reply$cookies
content(reply)
#content(reply)
as.data.frame(fromJSON(content(reply)))
unlist(content(reply))
content(reply)[1]
content(reply)[[1]]
content(reply)[[[1]]]
content(reply)[[[1]]]
content(reply)$tracks
content(reply)$tracks$album
content(reply)$tracks
reply$tracks[1]
library(httr)
library(jsonlite)
library(glue)
get_authentication_token <- function(CLIENT_ID, CLIENT_SECRET){
# Get response
response = POST('https://accounts.spotify.com/api/token',
accept_json(),
authenticate(CLIENT_ID, CLIENT_SECRET),
body = list(grant_type = 'client_credentials'),
encode = 'form',
verbose())
# Assign authorization token
auth_token = content(response)$access_token
return(auth_token)
}
get_songs <- function(authentication_token, seed_artists, seed_genres, seed_tracks,
## Optional bleow
limit=10, market=NA,
min_acousticness=NA, max_acousticness=NA, target_acousticness=NA,
min_danceability=NA, max_danceability=NA, target_danceability=NA,
min_duration_ms=NA, max_duration_ms=NA, target_duration_ms=NA,
min_energy=NA, max_energy=NA, target_energy=NA,
min_instrumentalness=NA, max_instrumentalness=NA, target_instrumentalness=NA,
min_key=NA, max_key=NA, target_key=NA,
min_liveness=NA, max_liveness=NA, target_liveness=NA,
min_loudness=NA, max_loudness=NA, target_loudness=NA,
min_mode=NA, max_mode=NA, target_mode=NA,
min_popularity=NA, max_popularity=NA, target_popularity=NA,
min_speechiness=NA, max_speechiness=NA, target_speechiness=NA,
min_tempo=NA, max_tempo=NA, target_tempo=NA,
min_time_signature=NA, max_time_signature=NA, target_time_signature=NA,
min_valence=NA, max_valence=NA, target_valence=NA) {
base_url = 'https://api.spotify.com/v1/recommendations'
query = query_assembler(seed_artists, seed_genres, seed_tracks, limit, market,
min_acousticness, max_acousticness, target_acousticness,
min_danceability, max_danceability, target_danceability,
min_duration_ms, max_duration_ms, target_duration_ms,
min_energy, max_energy, target_energy,
min_instrumentalness, max_instrumentalness, target_instrumentalness,
min_key, max_key, target_key,
min_liveness, max_liveness, target_liveness,
min_loudness, max_loudness, target_loudness,
min_mode, max_mode, target_mode,
min_popularity, max_popularity, target_popularity,
min_speechiness, max_speechiness, target_speechiness,
min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence)
url = paste0(base_url, query)
response <- GET(url, add_headers(Accept = 'application/json',
Authorization = paste('Bearer', authentication_token)))
#songs <- NA
#links <- NA
for(i in seq_along(response)){
print(content(response)$tracks[[i]]$name)
}
return (content(response))
}
query_assembler <- function(seed_artists, seed_genres, seed_tracks, limit, market,
min_acousticness, max_acousticness, target_acousticness,
min_danceability, max_danceability, target_danceability,
min_duration_ms, max_duration_ms, target_duration_ms,
min_energy, max_energy, target_energy,
min_instrumentalness, max_instrumentalness, target_instrumentalness,
min_key, max_key, target_key,
min_liveness, max_liveness, target_liveness,
min_loudness, max_loudness, target_loudness,
min_mode, max_mode, target_mode,
min_popularity, max_popularity, target_popularity,
min_speechiness, max_speechiness, target_speechiness,
min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence) {
## CAPTURE ALL VARIABLES IN A DATAFRAME
arguments <- data.frame(
params = c('seed_artists', 'seed_genres', 'seed_tracks', 'limit', 'market',
'min_acousticness', 'max_acousticness', 'target_acousticness',
'min_danceability', 'max_danceability', 'target_danceability',
'min_duration_ms', 'max_duration_ms', 'target_duration_ms',
'min_energy', 'max_energy', 'target_energy',
'min_instrumentalness', 'max_instrumentalness', 'target_instrumentalness',
'min_key', 'max_key', 'target_key',
'min_liveness', 'max_liveness', 'target_liveness',
'min_loudness', 'max_loudness', 'target_loudness',
'min_mode', 'max_mode', 'target_mode',
'min_popularity', 'max_popularity', 'target_popularity',
'min_speechiness', 'max_speechiness', 'target_speechiness',
'min_tempo', 'max_tempo', 'target_tempo',
'min_time_signature', 'max_time_signature', 'target_time_signature',
'min_valence', 'max_valence', 'target_valence'),
vals = c(seed_artists, seed_genres, seed_tracks, limit, market,
min_acousticness, max_acousticness, target_acousticness,
min_danceability, max_danceability, target_danceability,
min_duration_ms, max_duration_ms, target_duration_ms,
min_energy, max_energy, target_energy,
min_instrumentalness, max_instrumentalness, target_instrumentalness,
min_key, max_key, target_key,
min_liveness, max_liveness, target_liveness,
min_loudness, max_loudness, target_loudness,
min_mode, max_mode, target_mode,
min_popularity, max_popularity, target_popularity,
min_speechiness, max_speechiness, target_speechiness,
min_tempo, max_tempo, target_tempo,
min_time_signature, max_time_signature, target_time_signature,
min_valence, max_valence, target_valence))
## FILTER OUT UNSPECIFIED ARGUMENTS
specified_args <- na.omit(arguments)
## FORMAT THE BLANKS ///  var --> 'var={var}&' /// except the last var to --> 'var={var}'
formatted_args <- NA
for(i in 1:nrow(specified_args)){
if (i==1){
formatted_args[[i]] <- glue('?{specified_args[i,1]}={specified_args[i,2]}')
} else {
formatted_args[[i]] <- glue('&{specified_args[i,1]}={specified_args[i,2]}')
}
}
formatted_args
## CONCATENATE SPECIFIED VALUE LIST
assembled_query <- do.call(paste, c(as.list(formatted_args), sep = ""))
## RETURN ASSEMBLED QUERY
return (assembled_query)
}
client_id = Sys.getenv('Spotify_client_id')
client_secret = Sys.getenv('Spotify_client_secret')
auth_token = get_authentication_token(client_id, client_secret)
# Can we possible wrap all the parameters in a list then pass that?
#my_params <- list(seed_artists='4NHQUGzhtTLFvgF5SZesLK', seed_genres='classical,country',
#                 seed_tracks='0c6xIDDpzE81m2q797ordA', limit=10, market='CA')
reply <- get_songs(authentication_token = auth_token,
seed_artists='ULq258CyTgm6ULmxQmNz2Q',
seed_genres='funk,jazz,psychedelic rock',
seed_tracks='1alflwKGRVGvSOlMWDM2Z9',
limit=10, market='US')
reply$tracks[1]
# IMPORTANT:
# $tracks$name = song name
# TRACK LINKS
# $tracks$uri = track deep link (for the app)
# $track$external_urls$spotify = track url 1
# $track$linked_from$external_urls$spotify = track url 2
# EXTRA TRACK FEATURES
# $track$explicit = explicit or not
# $track$popularity = popularity
# $track$preview_url = 30 second preview <33333333
# ARTIST
# $tracks$artists$name = artist name
# $tracks$artists$external_urls$spotify = artist link
# ALBUM
# $tracks$album$name = album name
# $tracks$album$release_date = album release date
# $tracks$album$external_urls$spotify = album link
as.data.frame(fromJSON(reply$tracks))
reply$tracks
reply <- get_songs(authentication_token = auth_token,
seed_artists='ULq258CyTgm6ULmxQmNz2Q',
seed_genres='funk,jazz',
seed_tracks='1alflwKGRVGvSOlMWDM2Z9',
limit=10, market='US')
reply$tracks
reply <- get_songs(authentication_token = auth_token,
seed_artists='ULq258CyTgm6ULmxQmNz2Q',
seed_genres='funk,jazz,psychedelicrock',
seed_tracks='1alflwKGRVGvSOlMWDM2Z9',
limit=10, market='US')
reply <- get_songs(authentication_token = auth_token,
seed_artists='ULq258CyTgm6ULmxQmNz2Q',
seed_genres='funk,jazz,psychedelicrock,grasfad',
seed_tracks='1alflwKGRVGvSOlMWDM2Z9',
limit=10, market='US')
reply <- get_songs(authentication_token = auth_token,
seed_artists='ULq258CyTgm6ULmxQmNz2Q',
seed_genres='funk,jazz,psychedelicrock',
seed_tracks='1alflwKGRVGvSOlMWDM2Z9',
limit=10, market='US')
as.data.frame(fromJSON(reply$tracks))
as.data.frame(fromJSON(reply))
